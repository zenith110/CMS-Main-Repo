version: "3"

services:
  # grafana:
  #   image: grafana/grafana:latest
  #   ports:
  #     - 4000:4000
  #   volumes:
  #     - ./grafana:/var/lib/grafana
  mongo:
    image: mongo
    restart: always
    container_name: mongodb
    volumes:
      - ./mongo:/data/db
  graphql:
    build:
      context: ./backend
      dockerfile: dev.dockerfile
    container_name: graphql
    environment:
      CHOKIDAR_USEPOLLING: "true"
    restart: unless-stopped
    ports:
      - 8443:8443
    env_file:
      - .env
    depends_on:
      - mongo
    networks: 
      - zitadel
  portfolio:
    build:
      context: ./frontend/frontpage
      dockerfile: dev.dockerfile
    container_name: portfolio
    environment:
      CHOKIDAR_USEPOLLING: "true"
    restart: unless-stopped
    ports:
      - "80:3000"
    volumes:
      - /app/node_modules
      - ./frontend/frontpage:/home/app/portfolio
    env_file:
      - .env
    depends_on:
      - graphql
      - mongo
      - zinc
    networks: 
      - zitadel
  admin:
    build:
      context: ./frontend/admin-panel
      dockerfile: dev.dockerfile
    container_name: admin
    environment:
      CHOKIDAR_USEPOLLING: "true"
    restart: unless-stopped
    ports:
      - "3000:3000"
    volumes:
      - /app/node_modules
      - ./frontend/admin-panel:/home/app/admin-tool
    env_file:
      - .env
    depends_on:
      - graphql
      - mongo
      - zinc
    networks: 
      - zitadel
  # mysql:
  #   image: arm64v8/mysql:oracle
  #   restart: unless-stopped
  #   container_name: mysql
  #   ports:
  #     - "3306:3306"
  #   env_file:
  #     - .env
  # super_tokens:
  #   image: registry.supertokens.io/supertokens/supertokens-mysql
  #   restart: always
  #   container_name: super_tokens
  #   env_file:
  #     - .env
  #   ports:
  #     - "3567:3567"
  #   depends_on: 
  #     - "mysql"
  zinc:
    image: public.ecr.aws/h9e2j3o7/zinc:latest
    volumes:
      - ./zinc:/data
    ports:
      - "4080:4080"
    depends_on:
      - graphql
      - mongo
    env_file:
      - .env
  # configure:
  #   image: quay.io/gravitational/teleport:8
  #   container_name: teleport-configure
  #   entrypoint: /bin/sh
  #   hostname: teleport.abrahannevarez.dev
  #   command: -c "if [ ! -f /etc/teleport/teleport.yaml ]; then teleport configure > /etc/teleport/teleport.yaml; fi"
  #   volumes:
  #     - ./teleport-config:/etc/teleport

  # teleport:
  #   image: quay.io/gravitational/teleport:8
  #   container_name: teleport
  #   entrypoint: /bin/sh
  #   hostname: teleport.abrahannevarez.dev
  #   command: -c "sleep 1 && /bin/dumb-init teleport start -c /etc/teleport/teleport.yaml"
  #   ports:
  #     - "3023:3023"
  #     - "3024:3024"
  #     - "3025:3025"
  #     - "3080:3080"
  #   volumes:
  #     - ./teleport-config:/etc/teleport
  #     - ./teleport-data:/var/lib/teleport
  #   depends_on:
  #     - configure
  zitadel:
    restart: 'always'
    networks:
      - 'zitadel'
    image: 'ghcr.io/zitadel/zitadel:v2.0.0-v2-alpha.33-amd64'
    command: 'start-from-init --masterkey "MasterkeyNeedsToHave32Characters" --tlsMode disabled'
    environment:
      - 'ZITADEL_DATABASE_HOST=db'
      - 'ZITADEL_EXTERNALSECURE=false'
    depends_on:
      db:
        condition: 'service_healthy'
    ports:
      - '8080:8080'

  db:
    restart: 'always'
    networks:
      - 'zitadel'
    image: 'cockroachdb/cockroach:v22.1.0'
    command: 'start-single-node --insecure'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health?ready=1"]
      interval: '10s'
      timeout: '30s'
      retries: 5
      start_period: '20s'
    ports:
      - '9090:8080'
      - '26257:26257'
    networks: 
      - zitadel
volumes:
  mongo_storage:
networks:
  zitadel:
