version: "3.8"

services:
  mongo:
    image: mongo
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
    volumes:
      - ./mongo:/data/db
  cms-backend:
    image: zenith110/cms-backend
    container_name: cms-backend
    environment:
      CHOKIDAR_USEPOLLING: "true"
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.backend.service=cms-backend"
      - "traefik.http.routers.backend.tls.certresolver=dns-cloudflare"
      - "traefik.http.routers.backend.entrypoints=websecure"
      - "traefik.http.services.backend.loadbalancer.server.port=8443"
    ports:
      - ${BACKEND_PORT}:8443
    env_file:
      - .env
    networks:
      - web
  cms-frontend:
    image: zenith110/cms-frontend
    container_name: cms-frontend
    environment:
      CHOKIDAR_USEPOLLING: "true"
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.service=cms-frontend"
      - "traefik.http.routers.backend.tls.certresolver=dns-cloudflare"
      - "traefik.http.routers.backend.entrypoints=websecure"
      - "traefik.http.services.backend.loadbalancer.server.port=3000"
    ports:
      - 3000:3000
    env_file:
      - .env
    networks:
      - web
  zinc:
    image: public.ecr.aws/h9e2j3o7/zinc:latest
    container_name: zinc
    volumes:
      - ./zinc:/data
    ports:
      - 4080:4080
    depends_on:
      - graphql
      - mongo
    env_file:
      - .env
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.zinc.service=zinc"
      - "traefik.http.routers.zinc.tls.certresolver=dns-cloudflare"
      - "traefik.http.routers.zinc.entrypoints=websecure"
      - "traefik.http.services.zinv.loadbalancer.server.port=4080"
  auth:
    container_name: auth
    restart: 'always'
    networks:
      - web
    image: 'ghcr.io/zitadel/zitadel:v2.0.0-v2-alpha.33-amd64'
    command: 'start-from-init --config /prod-zitadel-config.yaml --config /prod-zitadel-secrets.yaml --steps /prod-zitadel-init-steps.yaml --masterkey "${ZITADEL_MASTERKEY}" --tlsMode external'
    environment:
      - 'ZITADEL_DATABASE_HOST=db'
      - 'ZITADEL_EXTERNALSECURE=false'
    depends_on:
      chown:
        condition: 'service_completed_successfully'
    ports:
      - '8080:8080'
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.auth.service=auth"
      - "traefik.http.routers.auth.tls.certresolver=dns-cloudflare"
      - "traefik.http.routers.auth.entrypoints=websecure"
      - "traefik.http.services.auth.loadbalancer.server.port=8080"
    volumes:
      - './prod-zitadel-config.yaml:/prod-zitadel-config.yaml:ro'
      - './prod-zitadel-secrets.yaml:/prod-zitadel-secrets.yaml:ro'
      - './prod-zitadel-init-steps.yaml:/prod-zitadel-init-steps.yaml:ro'
      - 'zitadel-certs:/crdb-certs:ro'
  chown:
    image: 'cockroachdb/cockroach:v22.1.0'
    entrypoint: [ '/bin/bash', '-c' ]
    command: [ 'cp /certs/ca.crt /zitadel-certs/ && cp /certs/client.root.crt /zitadel-certs/ && cp /certs/client.root.key /zitadel-certs/ && chown 1000:1000 /zitadel-certs/* && chmod 0400 /zitadel-certs/*' ]
    volumes:
      - certs:/certs:ro
      - zitadel-certs:/zitadel-certs:rw
    depends_on:
      auth-db:
        condition: 'service_healthy'

  auth-db:
    container_name: auth-db
    restart: 'always'
    networks:
      - 'zitadel'
    image: 'cockroachdb/cockroach:v22.1.0'
    command: 'start-single-node --advertise-addr auth-db'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health?ready=1"]
      interval: '10s'
      timeout: '30s'
      retries: 5
      start_period: '20s'
    ports:
      - 9090:8080
      - 26257:26257
    volumes:
      -  certs:/cockroach/certs:rw
      - ./auth-db:/cockroach/cockroach-data:rw
  reverse-proxy:
    # The official v2 Traefik docker image
    image: traefik
    restart: unless-stopped
    environment:
      - CF_API_EMAIL=${CLOUDFLARE_EMAIL}
      - CF_API_KEY=${CLOUDFLARE_API_KEY}
    # Tells Traefik to listen to docker
    command:
      # Global settings
      - --global.checkNewVersion=true
      - --global.sendAnonymousUsage=false
      # Entrypoints
      - --entryPoints.web.address=:80
      - --entryPoints.websecure.address=:443
      # Log
      - --log=true
      - --log.level=DEBUG # (Default: error) DEBUG, INFO, WARN, ERROR, FATAL, PANIC
      # Certificate
      - --certificatesResolvers.dns-cloudflare.acme.caServer=https://acme-staging-v02.api.letsencrypt.org/directory # LetsEncrypt Staging Server
      - --certificatesResolvers.dns-cloudflare.acme.email=${CLOUDFLARE_EMAIL}
      - --certificatesResolvers.dns-cloudflare.acme.storage=/acme.json
      - --certificatesResolvers.dns-cloudflare.acme.dnsChallenge.provider=cloudflare
      # Docker provider
      - --providers.docker=true
      - --providers.docker.endpoint=unix:///var/run/docker.sock
      - --providers.docker.exposedByDefault=false
      - --providers.docker.network=web
      - --providers.docker.swarmMode=false
      - --providers.docker.defaultRule=Host(`{{ index .Labels "com.docker.compose.service" }}.$DOMAIN`)
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.service=api@internal"
      - "traefik.http.routers.traefik.tls.certresolver=dns-cloudflare"
      - "traefik.http.routers.traefik.entrypoints=websecure"
    ports:
      # The HTTP port
      - "80:80"
      # The HTTPS port
      - "443:443"
    networks:
      - web
    volumes:
      # So that Traefik can listen to the Docker events
      - /var/run/docker.sock:/var/run/docker.sock
      - ./acme.json:/acme.json
   
networks:
  web:
    external:
      name: web
volumes:
  certs:
  zitadel-certs:
